package com.java.redis.book.theDesignAndImplementationOfRedis;

/**
 * 简单动态字符串(simple dynamic string, SDS)
 * 定义在sds.h/sdshdr中，如下所示
 * struct sdshdr {
 * 		// 记录buf数组中已使用字节的数量，等于该SDS所保存字符串的长度
 * 		int len;
 * 		// 记录buf数组中未使用字节的数量
 * 		int free;
 * 		// 字节数组，用于保存字符串
 * 		char buf[];
 * }
 * 根据传统，C语言使用长度为N+1的字符数组来表示长度为N的字符串，并且字符数组的最后一个元素总是空字符'\0'
 * SDS遵循C字符串以空字符'\0'结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里面
 *   并且为空字符分配额外的1字节空间，以及添加空字符到字符串末尾等操作，都是由SDS函数自动完成
 *   所以这个空字符对于SDS的使用者来说是完全透明的
 * 遵循空字符结尾这一惯例的好处是，SDS可以直接重用一部分C字符串函数库里的函数
 * 
 * SDS和C字符串的区别：
 * 1.C字符串并不记录自身的长度信息，所以获取长度的复杂度为O(N)
 *   SDS通过len属性记录自身长度，所以获取长度的复杂度为O(1)
 *   所以，获取字符串长度的工作不会成为Redis的性能瓶颈
 * 2.C字符串不记录自身长度，容易造成缓冲区溢出(buffer overflow)
 *     如：紧紧相邻的两个C字符串s1，s2，如果在s1末尾追加字符之前，忘记先给s1增加长度
 *     则会导致新增的内容溢出到s2所在的空间中，导致s2保存的内容被意外的修改，造成缓冲区溢出
 *   当SDS的API需要对SDS进行修改时，API会先检查SDS的空间能否满足需要，如满足则执行修改操作
 *   如不满足则扩展空间后再执行修改操作，所以使用SDS时，不用手动修改SDS空间大小，也不会造成缓冲区溢出
 * 3.C字符串的长度和底层数组之间的长度存在N->N+1的对应关系，所以每次修改C字符串的长度时，都需要进行一次内存重分配
 *     当增长C字符串时，如果在增长之前忘记内存重分配，则会造成缓冲区溢出
 *     当缩短C字符串时，如果在缩短之间忘记内存重分配，则会造成内存泄露
 *   注：因为内存重分配涉及复杂的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作
 *   SDS通过未使用空间(即free属性值)解除了N->N+1的这种对应关系，使得内存重分配的操作次数，从必定N次，降低为最多N次
 * 4.C字符串中的字符必须符合某种编码(比如ASCII)，并且除了字符串的末尾之外，字符串里面不能包含空字符
 *   所以C字符串只能保存文本数据，不能保存图像、音频、视频、压缩文件等二进制数据
 *   为了确保Redis可以适用于各种不同的使用场景，SDS的API都是二进制安全的(binary-safe)
 *   所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据，程序不会对其中的数据做任何限制、过滤、或者假设
 *   数据在写入时是什么样的，它被读取时就是什么样
 *   这也是我们将SDS的buf属性称为"字节数组"的原因，Redis不是用这个数组来保存字符，而是用来保存一系列二进制数据
 *   所以Redis不仅可以保存文本数据，还可以保存任意格式的二进制数据
 * 5.C字符串可以使用所有<string.h>库中的函数
 *   SDS可以使用部分<string.h>库中的函数
 * 
 * 通过未使用空间(即free属性值)，SDS实现了"空间预分配"和"惰性空间释放"两种优化策略
 *   空间预分配：该策略用于优化SDS字符串的增长操作
 *     如果对SDS进行修改之后，SDS的长度(即len属性值)将<1MB
 *     那么程序分配和len属性同样大小的未使用空间(即free属性值=len属性值)
 *     如果对SDS进行修改之后，SDS的长度(即len属性值)将>=1MB
 *     那么程序分配1MB未使用空间(即free属性值=1MB)
 *     该策略可以减少连续执行字符串增长操作所需的内存重分配次数
 *   惰性空间释放：该策略用于优化SDS字符串的缩短操作
 *     当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节
 *     而是使用free属性将这些字节的数量记录起来，并等待将来使用
 *     与此同时，SDS也提供了相应的API，让我们可以在有需要时，真正的释放SDS的未使用空间，所以不用担心该策略会造成内存浪费
 *     
 * 注：Redis只会使用C字符串作用字面量，如：redisLog(REDIS_WARNING, "Redis is now ready to exit, bye bye...");
 *    大多数情况下，Redis使用SDS作为字符串表示
 * 
 * @author ChengHan
 * @date 2018年5月12日 上午10:23:30
 */
public class Chapter2 {

}
