package com.java.redis.book.theDesignAndImplementationOfRedis;

/**
 * 跳跃表(skiplist)
 * Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构
 * 跳跃表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的
 * 跳跃表支持平均O(logN)、最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点
 * 在大部分情况下，跳跃表的效率可以和平衡树相媲美，并且因为跳跃表的实现比平衡树要来的更简单，所以不少程序都使用跳跃表来代替平衡树
 * 
 * 跳跃表的实现
 * 跳跃表由结构redis.h/zskiplist定义
 * typedef struct zskiplist {
 *   //表头节点和表尾节点
 *   struct zskiplistNode *header, *tail;
 *   //表中节点的数量
 *   unsigned long length;
 *   //表中层数最大的节点的层数
 *   int level;
 * } zskiplist
 * 其中，*header指向跳跃表的表头节点，*tail指向跳跃表的表尾节点
 * length记录跳跃表的长度(表头节点不计算在内)
 * level记录目前跳跃表内，层数最大的那个节点的层数(表头节点不计算在内)
 * 
 * 跳跃表节点由结构redis.h/zskiplistNode定义
 * typedef struct zskiplistNode {
 *   //成员对象
 *   robj *obj;
 *   //分值
 *   double score;
 *   //后退指针
 *   struct zskiplistNode *backward;
 *   //层
 *   struct zskiplistLevel {
 *     //前进指针
 *     struct zskiplistNode *forward;
 *     //跨度
 *     unsigned int span;
 *   } level[];
 * } zskiplistNode;
 * 其中，每个层都带有2个属性，前进指针和跨度。前进指针用于访问位于表尾方向的其他节点，
 * 而跨度则记录了"当前节点"和"前进指针所指向的节点"的距离，当程序从表头开始向表尾遍历时，遍历会沿着"层的前进指针"进行
 * 后退指针，他指向的是"当前节点的前一节点"，后退指针在程序从表尾向表头方向遍历时使用
 * 分值，在跳跃表中，节点按照各自所保存的分值从小到大排列
 * 成员对象，该节点所保存的对象
 * 注意：表头节点和其他节点的构造是一样的。表头节点也有后退指针，分值，成员对象和层等属性，但除层之外，其他表头节点的属性不会被用到。
 * 
 * 跳跃表节点
 * 跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针和跨度。程序可以通过这些层来加快访问其他节点的速度
 * 一般来说，层的数量越多，访问其他节点的速度就越快。
 * 每次创建一个新跳跃表节点的时候，程序都会根据幂次定律(power law，越大的数出现的概率越小)随机生成一个介于[1,32]之间的值作为level数组的长度，
 * 该值就是层的"高度"。层数组索引从0开始，即第一层L1是level[0]，第二层L2是level[1]，以此类推
 * 前进指针
 * 每个层都有一个指向表尾方向的前进指针(即level[i].forward属性)
 * 跨度
 * 层的跨度(即level[i].span属性)用于记录两个节点之间的距离
 * 1.两个节点之间的跨度越大，则他们相距的越远
 * 2.指向NULL的所有前进指针的跨度都为0，因为他们没有指向任何节点
 * 跨度和遍历操作没有关系。遍历操作只需要前进指针就可以完成了。跨度是用来计算"排外(rank)"的，
 * 在查找某个节点的过程中，将沿途访问过的所有层的跨度累加起来，得到的结果就是目标节点在跳跃表中的排外。
 * 后退指针
 * 该指针用于从表尾向表头的方向遍历节点，跟一次可以跳过多个节点的前进指针不同，因为每个节点只有一个后退指针，所以后退指针只能后退至前一节点
 * 分值和成员
 * 分值(score)，是一个double类型的浮点数，跳跃表中的所有节点都按分值从小到大来排序
 * 成员(*obj)，是一个指针，他指向一个字符串对象，而字符串对象则保存着SDS值
 * 在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的
 * 分值相同的节点，按照成员对象在字典序中的大小来排序，较小的排在前面(靠近表头)，较大的排在后面(靠近表尾)
 * 仅靠多个跳跃表节点就可以组成一个跳跃表，但使用zskiplist来持有这些节点的话，程序可以更方便的进行操作，比如获得跳跃表节点总数，表头节点，表尾节点等
 * 
 * @author ChengHan
 * @date 2018年6月21日 下午9:24:43
 */
public class Chapter5 {

}
