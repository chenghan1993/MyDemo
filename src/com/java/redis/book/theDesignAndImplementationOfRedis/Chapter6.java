package com.java.redis.book.theDesignAndImplementationOfRedis;

/**
 * 整数集合(intset)
 * 整数集合是集合键的底层实现之一，当一个集合只包含整数元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现
 * 整数集合是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、int32_t或者int64_t的整数值，并且保证集合中不会出现重复的元素
 * 
 * 整数集合用intset.h/intset结构表示
 * typedef struct intset {
 *   //编码方式
 *   uint32_t encoding;
 *   //集合包含的元素数量
 *   uint32_t length;
 *   //保存元素的数组
 *   int8_t contents[];
 * } intset;
 * contents[]数组是整数集合的底层实现，整数集合的每个元素都是contents数组的一个数组项(item)，各个项在数组中按值的大小从小到大有序地排列，并且数组中不包括任何重复项
 * 虽然intset结构将contents数组声明为int8_t类型，但contents数组的真正类型取决于encoding属性的值
 * encoding的值有三个：INTSET_ENC_INT16、INTSET_ENC_INT32和INTSET_ENC_INT64，对应的contents数组类型就是int16_t、int32_t和int64_t
 * 
 * 整数集合的升级
 * 升级规则，即当一个底层为int6_t的数组添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型
 * 其中，整数集合先进行升级(upgrade)，然后才能将新元素添加到整数集合里面
 * 升级整数集合并添加新元素共分三步进行
 * 1.根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间
 * 2.将底层数组已有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置的正确的位置上，而且在放置元素的过程中，需要继续维持底层数组的有序性质不变
 * 3.将新元素添加到底层数组里面
 * 整数的升级策略有2个好处，一是提升整数集合的灵活性，二是尽可能地节约内存
 * 提升灵活性，C语言是静态类型语言，为了避免类型错误，通常不会将两种不同类型的值放在同一个数据结构里面，但整数集合可以通过自动升级底层数组来适应新元素，
 * 所以我们可以随意的将nt16_t、int32_t或int64_t类型的整数添加到集合中，而不必担心出现类型错误
 * 节约内存，我们只在有需要的时候进行升级操作，而不必一开始就要申请int64_t类型的数组
 * 
 * 整数集合的降级
 * 整数集合不支持降级操作，一旦升级，则不可逆
 * 
 * @author ChengHan
 * @date 2018年6月23日 上午11:37:39
 */
public class Chapter6 {

}
